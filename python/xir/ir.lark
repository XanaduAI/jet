// IR grammar
program: (include | declarations | circuit)*
include: "use" name ";"

// the main circuit
circuit: statement+
statement: gatestmt | gate_def | operator_def | script_options
gatestmt: (ADJOINT | (CTRL wires))* name (params | options_dict) "|" wires ";"
opstmt: expr "," obs_group";"
script_options: _OPTIONS ":" (option ";")+ _END ";"

gate_def: _GATE name params wires? ":" gatestmt+ _END ";"
operator_def: _OP name params wires? ":" opstmt+ _END ";"

options_dict: "(" option ("," option)* ")"
option: name ":" val

obs_group: obs "[" uint "]" ("@" obs "[" uint "]")*
?obs: name

// list-types
wires : "[" (uint | range | name) ("," (uint | range | name))* "]"
params: ["(" val ("," val)* ")"]  // always optional (easier to parse)
array : "[" (val ("," val)*)? "]"

?val  : bool | expr | array
float : SIGNED_FLOAT
int   : SIGNED_INT
uint  : INT
imag : (float | int) "j"

name: CNAME
bool: TRUE_ | FALSE_
range: INT ".." INT

?expr: prodexpr
     | expr "+" prodexpr -> add
     | expr "-" prodexpr -> sub

?prodexpr: atom
         | prodexpr "*" atom -> prod
         | prodexpr "/" atom -> div

?atom: int
     | float
     | imag
     | name -> var
     | "-" (name | "(" expr ")" | name "(" expr ")") -> neg
     | "(" expr ")"
     | name "(" expr ")" -> mathop
     | PI

// reserved keywords
PI: "pi"

_OPTIONS: "options"
_GATE: "gate"
_FUNC: "func"
_OP: "operator"
_OUT: "output"
ADJOINT: "adjoint"
CTRL: "ctrl"

_END: "end"

TRUE_: "true"
FALSE_: "false"

// declarations
?declarations: (gate_decl | operator_decl | func_decl | output_decl)

gate_decl: _GATE name "," uint "," uint ";"
operator_decl: _OP name "," uint "," uint ";"
func_decl: _FUNC name "," uint ";"
output_decl: _OUT name ";"

// std imports from common.lark
%import common.ESCAPED_STRING
%import common.SIGNED_INT
%import common.INT
%import common.SIGNED_FLOAT
%import common.CPP_COMMENT
%import common.CNAME
%import common.WS

// ignore whitespace and comments
%ignore WS
%ignore CPP_COMMENT
